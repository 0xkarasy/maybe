name: TEMPLATE | Deploy services
on:
    workflow_call:
        inputs:
            deploy_env:
                description: Environment to deploy to.  Valid values are `staging | production`
                type: string
                required: true
            deploy_shared_stack:
                type: boolean
                required: false
                default: true
            deploy_server_stack:
                type: boolean
                required: false
                default: false
            deploy_workers_stack:
                type: boolean
                required: false
                default: false
            deploy_tools_stack:
                type: boolean
                required: false
                default: false
            deploy_vercel_client:
                type: boolean
                required: false
                default: false

jobs:
    deploy_services:
        name: Deploy services
        runs-on: [self-hosted, aws]

        env:
            CDK_ENV: ${{ inputs.deploy_env }} # Determines which AWS account resources are deployed to
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: us-west-2

        steps:
            - name: Checkout repo
              uses: actions/checkout@v3

            - name: Print deploy targets
              run: |
                  echo "Env: ${{ inputs.deploy_env }}"
                  echo "Shared: ${{ inputs.deploy_shared_stack }}"
                  echo "Server: ${{ inputs.deploy_server_stack }}"
                  echo "Workers: ${{ inputs.deploy_workers_stack }}"
                  echo "Client: ${{ inputs.deploy_vercel_client }}"
                  echo "Tools: ${{ inputs.deploy_tools_stack }}"

            # If either server/workers need to be built, install node_modules
            - name: Install node_modules
              if: ${{ inputs.deploy_server_stack || inputs.deploy_workers_stack }}
              run: yarn install --frozen-lockfile

            # If server affected, build to /dist
            - name: Build server
              if: ${{ inputs.deploy_server_stack }}
              run: yarn nx run server:build:production

            # If workers affected, build to /dist
            - name: Build workers
              if: ${{ inputs.deploy_workers_stack }}
              run: yarn nx run workers:build:production

            - name: Initialize and test CDK
              working-directory: aws/maybe-app
              run: yarn install && ./node_modules/.bin/cdk ls && yarn test

            - name: Deploy shared infrastructure
              if: ${{ inputs.deploy_shared_stack }}
              working-directory: aws/maybe-app
              run: ./node_modules/.bin/cdk deploy SharedStack --require-approval never

            - name: Deploy server and workers in parallel
              if: ${{ inputs.deploy_server_stack && inputs.deploy_workers_stack }}
              working-directory: aws/maybe-app
              run: ./node_modules/.bin/cdk deploy ServerStack WorkersStack --concurrency 2 --require-approval never

            - name: Deploy server only
              if: ${{ inputs.deploy_server_stack && !inputs.deploy_workers_stack }}
              working-directory: aws/maybe-app
              run: ./node_modules/.bin/cdk deploy ServerStack --require-approval never

            - name: Deploy workers only
              if: ${{ inputs.deploy_workers_stack && !inputs.deploy_server_stack }}
              working-directory: aws/maybe-app
              run: ./node_modules/.bin/cdk deploy WorkersStack --require-approval never

            - name: Deploy client
              env:
                  VERCEL_DEPLOY_HOOK_URL: ${{ inputs.deploy_env == 'production' && secrets.VERCEL_DEPLOY_HOOK_URL || secrets.STAGING_VERCEL_DEPLOY_HOOK_URL }}
              if: ${{ inputs.deploy_vercel_client }}
              run: curl -X POST $VERCEL_DEPLOY_HOOK_URL

              # This stack contains the github runner and other CI/CD tools on AWS
            - name: Deploy tools
              if: ${{ inputs.deploy_tools_stack }}
              working-directory: aws/maybe-app
              run: CDK_ENV=tools ./node_modules/.bin/cdk deploy ToolsStack --require-approval never

              # Removes all Docker assets older than 1 day (leave recent images on machine to utilize Docker cache)
            - name: Cleanup Docker
              if: ${{ always() }}
              run: docker system prune --all --filter "until=24h" --force
